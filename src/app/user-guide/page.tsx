import * as React from 'react';
import { createClient } from '@/lib/supabase/server';
import { redirect } from 'next/navigation';
import DashboardLayout from '@/components/layout/DashboardLayout';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion"
import {
  Heart,
  ShoppingBag,
  GitBranch,
  Wand2,
  Calendar,
  Star,
  CheckCircle2,
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import Link from 'next/link';
import { cn } from '@/lib/utils';
import { Separator } from '@/components/ui/separator';


type Step = {
  name: string;
  href: string;
  icon: React.ElementType;
  description: string;
  isComplete: boolean;
  instructions: string;
};

async function getCompletionStatus(userId: string) {
    const supabase = createClient();
    
    const { data: brandHeart, error: brandHeartError } = await supabase.from('brand_hearts').select('id').eq('user_id', userId).maybeSingle();
    const { data: offering, error: offeringError } = await supabase.from('offerings').select('id').eq('user_id', userId).limit(1).maybeSingle();
    const { data: funnel, error: funnelError } = await supabase.from('funnels').select('id').eq('user_id', userId).limit(1).maybeSingle();
    const { data: mediaPlan, error: mediaPlanError } = await supabase.from('media_plans').select('id').eq('user_id', userId).limit(1).maybeSingle();
    const { data: artisanItem, error: artisanError } = await supabase.from('media_plan_items').select('id').eq('user_id', userId).in('status', ['ready_for_review', 'scheduled', 'published']).limit(1).maybeSingle();
    const { data: calendarItem, error: calendarError } = await supabase.from('media_plan_items').select('id').eq('user_id', userId).eq('status', 'scheduled').limit(1).maybeSingle();
    const { data: testimonial, error: testimonialError } = await supabase.from('testimonials').select('id').eq('user_id', userId).limit(1).maybeSingle();

    return {
        brandHeart: !!brandHeart,
        offerings: !!offering,
        funnels: !!funnel,
        mediaPlan: !!mediaPlan,
        aiArtisan: !!artisanItem,
        calendar: !!calendarItem,
        harvestCircle: !!testimonial,
    };
}


export default async function UserGuidePage() {
  const supabase = createClient();
  const { data: { user } } = await supabase.auth.getUser();

  if (!user) {
    return redirect('/login');
  }

  const completionStatus = await getCompletionStatus(user.id);
  
  const steps: Step[] = [
    { name: 'Brand Heart', href: '/brand', icon: Heart, description: "Define your brand's soul to guide the AI.", isComplete: completionStatus.brandHeart, instructions: "This is the first and most crucial step. Here, you will define your brand's identity and voice. All future communication and content will be based on this foundation." },
    { name: 'Offerings', href: '/offerings', icon: ShoppingBag, description: 'Create the products and services you offer.', isComplete: completionStatus.offerings, instructions: "Once your brand is defined, the next step is to create the products, services, or experiences you provide to your audience." },
    { name: 'AI Strategist', href: '/funnels', icon: GitBranch, description: 'Generate a strategic plan for an offering.', isComplete: completionStatus.funnels, instructions: "With your offerings created, you can now generate a marketing strategy designed for a specific offering." },
    { name: 'Campaign Orchestrator', href: '/funnels', icon: Wand2, description: "Create a content campaign from your AI strategy.", isComplete: completionStatus.mediaPlan, instructions: "The strategy defines the approach; the campaign turns that strategy into concrete content for your channels. It creates a series of content drafts (social media posts, emails, etc.) tailored to each stage of the strategy." },
    { name: 'AI Artisan', href: '/artisan', icon: Wand2, description: "Personalize and schedule your AI-generated content.", isComplete: completionStatus.aiArtisan, instructions: "This is your creative studio for refining and personalizing the content drafts generated by the Campaign Orchestrator before they are scheduled." },
    { name: 'Calendar', href: '/calendar', icon: Calendar, description: 'Organize and visualize your content calendar.', isComplete: completionStatus.calendar, instructions: "This is where everything comes to life. The calendar allows you to visualize and manage when your approved and customized content will be published." },
    { name: 'Harvest Circle', href: '/harvest-circle', icon: Star, description: 'Harvest testimonials and reuse them as content.', isComplete: completionStatus.harvestCircle, instructions: "After your offerings have been delivered, the Harvest Circle helps you gather and utilize social proof to fuel future marketing." },
  ];

  const completedSteps = steps.filter(step => step.isComplete).length;
  const progressPercentage = (completedSteps / steps.length) * 100;

  return (
    <DashboardLayout>
      <div className="p-4 sm:p-6 lg:p-8 space-y-8">
        <header>
            <h1 className="text-3xl font-bold">User Guide</h1>
            <p className="text-muted-foreground">Follow the regenerative cycle to bring your marketing to life, from soul to social proof.</p>
        </header>

        <Card className="rounded-2xl shadow-sm">
            <CardHeader>
                <CardTitle className="text-lg font-semibold">Your Regenerative Cycle</CardTitle>
                 <div className="flex items-center gap-4 pt-2">
                    <Progress value={progressPercentage} className="h-3" />
                    <span className="font-semibold text-primary">{Math.round(progressPercentage)}%</span>
                </div>
            </CardHeader>
            <CardContent>
                <Accordion type="single" collapsible className="w-full">
                    {steps.map((step, index) => (
                        <AccordionItem value={`item-${index}`} key={step.name}>
                            <AccordionTrigger className="p-3 rounded-lg transition-colors hover:bg-muted/50">
                                <div className="flex items-center gap-4 w-full">
                                    <div className={cn(
                                        "w-10 h-10 rounded-full flex items-center justify-center border-2 flex-shrink-0",
                                        step.isComplete ? "bg-green-500/20 border-green-500 text-green-500" : "bg-muted border-dashed text-muted-foreground"
                                    )}>
                                       {step.isComplete ? <CheckCircle2 className="h-6 w-6" /> : <span className="font-bold text-lg">{index + 1}</span>}
                                    </div>
                                    <div className="flex-1 text-left">
                                       <p className="font-semibold text-foreground">{step.name}</p>
                                       <p className="text-sm text-muted-foreground">{step.description}</p>
                                    </div>
                                    <Button asChild variant={step.isComplete ? "secondary" : "default"} className="ml-auto">
                                        <Link href={step.href}>
                                          {step.isComplete ? 'View & Edit' : 'Start'}
                                        </Link>
                                    </Button>
                                </div>
                            </AccordionTrigger>
                            <AccordionContent className="pl-16 pr-4 py-4 text-muted-foreground">
                                {step.instructions}
                            </AccordionContent>
                        </AccordionItem>
                    ))}
                </Accordion>
            </CardContent>
        </Card>
      </div>
    </DashboardLayout>
  );
}
