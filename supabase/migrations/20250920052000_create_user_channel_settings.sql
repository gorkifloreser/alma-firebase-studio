
-- Create the table to store user-specific channel settings
create table if not exists public.user_channel_settings (
    id bigint generated by default as identity primary key,
    user_id uuid not null references auth.users (id) on delete cascade,
    channel_name text not null,
    best_practices text,
    created_at timestamp with time zone not null default now(),
    updated_at timestamp with time zone not null default now(),
    unique (user_id, channel_name)
);

-- Add comments to the table and columns
comment on table public.user_channel_settings is 'Stores user-defined best practices and settings for each marketing channel.';
comment on column public.user_channel_settings.channel_name is 'The name of the marketing channel (e.g., instagram, facebook).';
comment on column public.user_channel_settings.best_practices is 'User-editable text blob containing AI instructions for this channel.';

-- Create the function to handle auto-updating the updated_at timestamp
create or replace function public.handle_user_channel_settings_update()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql security definer;

-- Create the trigger to call the function
create trigger on_user_channel_settings_update
  before update on public.user_channel_settings
  for each row execute procedure public.handle_user_channel_settings_update();

-- Enable Row Level Security (RLS)
alter table public.user_channel_settings enable row level security;

-- Create RLS policies
create policy "Allow authenticated users to view their own channel settings"
  on public.user_channel_settings for select
  to authenticated
  using ( auth.uid() = user_id );

create policy "Allow authenticated users to insert their own channel settings"
  on public.user_channel_settings for insert
  to authenticated
  with check ( auth.uid() = user_id );

create policy "Allow authenticated users to update their own channel settings"
  on public.user_channel_settings for update
  to authenticated
  using ( auth.uid() = user_id )
  with check ( auth.uid() = user_id );

create policy "Allow authenticated users to delete their own channel settings"
  on public.user_channel_settings for delete
  to authenticated
  using ( auth.uid() = user_id );

-- Grant usage on the new table to the authenticated role
grant select, insert, update, delete on table public.user_channel_settings to authenticated;
